#!/usr/bin/env @PYTHON@
#
#  plroute - Plot the destruction/formation routes computed by
#  astrochem for a given specie
#
#  Copyright (c) 2006-2016 Sebastien Maret
#
#  This file is part of Astrochem.
#
#  Astrochem is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
#  by the Free Software Foundation, either version 3 of the License,
#  or (at your option) any later version.
#
#  Astrochem is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Astrochem.  If not, see <http://www.gnu.org/licenses/>.

import sys
sys.path.append("@abs_top_srcdir@/python/") # @REMOVE_INST@
sys.path.append("@pythondir@")
import os.path
import getopt
import biggles
from numpy import *
try:
    from astrochem.tools import network_reader, readroutlegacy, readrout, _totex_species, listspecies, readfilesattrs
except ImportError:
    from tools import network_reader, readroutlegacy, readrout, _totex_species, listspecies, readfilesattrs

PACKAGE_VERSION = "@PACKAGE_VERSION@"
PACKAGE_BUGREPORT = "@PACKAGE_BUGREPORT@"

def usage():
    """
    Display usage.

    """

    print """Usage: plroute [options] file specie

Plot formation/destruction rates vs. time

Options:
   -h, --help               Display this help
   -V, --version            Display plroute version information
   -o, --output             Create a postscript file

   -c, --cell=index         Set the cell index. Default is 0.
   -x, --xrange=xmin,xmax   Set the x axis range
   -y, --yrange=ymin,ymax   Set the y axis range
   -p, --percent            Print the relative contribution of each route
   -l, --legacy             To be able to read old output format file (.rout)
   -m, --chmfile=file       Specify chemical network file (deprecated, used only in legacy mode)

See the plroute(1) man page for more information"""
    print "Report bugs to <%s>." % PACKAGE_BUGREPORT

def version():
    """
    Display version number.

    """

    print "This is plroute, version %s" % PACKAGE_VERSION
    print """Copyright (c) 2006-2016 Sebastien Maret

This is free software. You may redistribute copies of it under the terms
of the GNU General Public License. There is NO WARRANTY, to the extent
permitted by law."""

def curveblank(xvalues, yvalues, blanking = 0, linecolor = "black",
               linetype = "solid"):
    """
    Return a list of curves of yvalues vs. xvalues with blank values

    This function returns a list of curves of yvalues vs. xvalues
    ignoring blanked values. For example, if xvalues = [1,2,3,4,5] and
    yvalues = [1,2,0,3,4], it will return a list of two curves
    corresponding to the xvalues [1,2] and [3,4], respectively. These
    curves can be added to a plot object, so the two closest non
    blanked value from a blank values (2 and 3 in this example) are
    not connected.

    Arguments:
       xvalues:     sequence of x values
       yvalues:     sequence of y values
       blanking:    blanking value for y (default 0)
       linecolor:   curve color (default "black")
       linetype:    curve type (default "solid")

    """

    x = []
    y = []
    c = []
    for xi, yi in zip(xvalues, yvalues):
        if yi != blanking:
            x.append(xi)
            y.append(yi)
        else:
            if len(x) >= 2:
                c.append(biggles.Curve(x, y, linecolor = linecolor,
                                       linetype = linetype, linewidth = 2))
            x = []
            y = []
    if len(x) >= 2:
        c.append(biggles.Curve(x, y, linecolor = linecolor,
                               linetype = linetype, linewidth = 2))

    return c

def main():
    """
    Main program for plroute

    """

    # Parse options and arguments
    try:
	opts, args = getopt.getopt(sys.argv[1:], "hVo:c:s:x:y:m:p:l",
				   ["help", "version", "output=",
                                    "cell=", "shell=", "xrange=",
                                    "yrange=", "chmfile=", "percent",
                                    "legacy"])
    except getopt.GetoptError:
	usage()
	sys.exit(1)

    output = None
    c =  0
    xrange = None
    yrange = None
    chmfile = None
    percent = False
    legacy = False

    for opt, arg in opts:
	if opt in ("-h", "--help") :
	    usage()
	    sys.exit()
	if opt in ("-V", "--version") :
	    version()
	    sys.exit()
	if opt in ("-o", "--output"):
	    output = arg
	if opt in ("-c", "--cell") or opt in ("-s", "--shell"):
            if opt in ("-s", "--shell"):
                sys.stderr.write("plabun: warning: --shell option is deprecated, use --cell instead.\n")
            try:
                c = int(arg)
            except:
                sys.stderr.write("plroute: error: invalid cell index.\n")
                sys.exit(1)
        if opt in ("-x", "--xrange"):
            try:
                xrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plroute: error: invalid x axis range.\n")
                sys.exit(1)
        if opt in ("-y", "--yrange"):
            try:
                yrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plroute: error: invalid y axis range.\n")
                sys.exit(1)
        if opt in ("-m", "--chmfile"):
            chmfile = arg
        if opt in ("-p", "--percent"):
            percent = True
        if opt in ("-l", "--legacy"):
            legacy = True

    if len(args) == 0:
	usage()
	sys.exit(1)

    # Ignore commands, for backward compatibility
    if args[0] == "time":
        sys.stderr.write("plabun: warning: time command is deprecated, ignoring it.\n")
        args = args[1:]

    if legacy:
        if len(args) != 1:
            usage()
            sys.exit(1)
    else:
        if len(args) == 1:
            print "Available species in this file are:"
            try:
                listspecies( args[0] )
            except IOError as e:
                sys.stderr.write("plroute: error: can't open %s. Error : %s\n" % (filename, e) )
            except ValueError as e:
                sys.stderr.write("plroute: error: can't read %s. Error : %s\n" % (filename, e) )
            sys.exit(1)
        else:
            if len(args) != 2:
                usage()
                sys.exit(1)

    filename = args[0]
    if not legacy:
        specie = args[1]
        chmfile, tmp = readfilesattrs( filename )

    biggles.configure( 'screen', 'width', 1200 )
    biggles.configure( 'screen', 'height', 600 )
    biggles.configure('postscript', 'width', '15.0in')
    biggles.configure('postscript', 'height', '7.5in')

    if legacy:
        # Get species name from the filename
        specie = os.path.splitext(os.path.basename(filename))[0]

    t = biggles.Table(1,2)
    p1 = biggles.FramedPlot()
    p2 = biggles.FramedPlot()
    p1.title = "$Main " + _totex_species(specie) + " formation routes$"
    p2.title = "$Main " + _totex_species(specie) + " destruction routes$"
    p1.ytitle = "$Formation rate (cm^{-3} s^{-1})$"
    p2.ytitle = "$Destruction rate (cm^{-3} s^{-1})$"
    p1.ylog = p2.ylog = 1
    if xrange:
	p1.xrange = p2.xrange = xrange
    if yrange:
	p1.yrange = p2.yrange = yrange
    curves_f = []
    curves_d = []

    # Stack for line colors
    linecolor_stack = ["red", "blue", "green", "yellow", "orange", "cyan"]
    
    # Plot formation/destruction rates as a function of time or cell
    # number for the main formation/destruction routes

    # legacy code
    if legacy:
        try:
            time, cell, formation_reac, formation_rate, destruction_reac, \
                destruction_rate = readroutlegacy(filename)
        except IOError as e:
            sys.stderr.write("plroute: error: can't open %s.\n" % filename)
            sys.exit(1)
        except ValueError:
            sys.stderr.write("plroute: error: can't read %s.\n" % filename)
            sys.exit(1)

        p1.xtitle = p2.xtitle = "Time (yr)"
        p1.xlog = p2.xlog = 1

        # Check that the cell index is valid
        try:
            temp = formation_reac[c, 0, 0]
        except IndexError:
            sys.stderr.write("plroute: error: cell index is out of bounds.\n")
            sys.exit(1)

        # Create arrays containing the destruction/formation routes at
        # each time step and in each cell

        f_reac = unique(formation_reac[c, :, :])
        d_reac = unique(destruction_reac[c, :, :])
        f_reac = f_reac[f_reac.nonzero()]
        d_reac = d_reac[d_reac.nonzero()]
        f_rate = zeros(len(f_reac) * len(time), dtype=float)
        d_rate = zeros(len(d_reac) * len(time), dtype=float)
        f_rate = f_rate.reshape(len(f_reac), len(time))
        d_rate = d_rate.reshape(len(d_reac), len(time))

        for i in range(len(time)):
            for j in range(len(f_reac)):
                index = where(formation_reac[c, i, :] == f_reac[j])[0]
                if len(index) > 0:
                    f_rate[j, i] = formation_rate[c, i, index[0]]
                else:
                    f_rate[j, i] = 0.
            for j in range(len(d_reac)):
                index = where(destruction_reac[c, i, :] == d_reac[j])[0]
                if len(index) > 0:
                    d_rate[j, i] = destruction_rate[c, i, index[0]]
                else:
                    d_rate[j, i] = 0.

        # Find the most important formation/destruction routes. For
        # this we compute the integral of the formation/destruction
        # rates for each formation/destruction over the time interval.

        int_f_rate = zeros(len(f_reac), dtype=float)
        int_d_rate = zeros(len(d_reac), dtype=float)

        dtime = time[1:-1] - time[0:-2]

        for j in range(len(f_reac)):
            if (f_rate[j] == 0).all(): continue
            int_f_rate[j] = sum(f_rate[j, 1:-1] * dtime)
        for j in range(len(d_reac)):
            int_d_rate[j] = sum(-d_rate[j, 1:-1] * dtime)

        if percent:
            int_f_rate_percent = int_f_rate / sum(int_f_rate) * 100.
            int_d_rate_percent = int_d_rate / sum(int_d_rate) * 100.

        index_f = int_f_rate.argsort()[::-1]
        index_d = int_d_rate.argsort()[::-1]
        # FixMe: drop values containing only zeros

        # Find the reaction corresponding to the reaction numbers

        if chmfile:
            try:
                f = open(chmfile)
                net = network_reader.fromfile(f, fileformat = "chm")
                f.close()
            except:
                sys.stderr.write("plroute: error: can't read %s.\n" % chmfile)
                sys.exit(1)
            try:
                f_reaction, d_reaction = [], []
                for r in f_reac:
                    f_reaction.append(net.getreact(r).totex())
                for r in d_reac:
                    d_reaction.append(net.getreact(r).totex())
            except ValueError:
                sys.stderr.write("plroute: error: can't find reaction %i in %s.\n" \
                                     % (r, chmfile))
                sys.exit(1)

        # Plot them, ignoring blanked values

        for j in index_f[0:6]:
            linecolor = linecolor_stack.pop(0)
            linecolor_stack.append(linecolor)

            c = curveblank(time, f_rate[j, :], linecolor = linecolor)
            if chmfile:
                c[0].label = f_reaction[j]
            else:
                c[0].label = "%i" % f_reac[j]
            if percent:
                c[0].label += " (%.0f" % int_f_rate_percent[j] + "%)"
            curves_f.append(c[0])
            for ci in c:
                p1.add(ci)

        for j in index_d[0:6]:
            linecolor = linecolor_stack.pop(0)
            c = curveblank(time, -d_rate[j, :], linecolor = linecolor)
            if chmfile:
                c[0].label = d_reaction[j]
            else:
                c[0].label = "%i" % d_reac[j]
            if percent:
                c[0].label += " (%.0f" % int_d_rate_percent[j] + "%)"
            curves_d.append(c[0])
            for ci in c:
                p2.add(ci)

        # Plot the total formation and destruction rates

        c = curveblank(time, sum(f_rate, axis = 0), linetype = "dotted")
        c[0].label = "Total"
        curves_f.append(c[0])
        for ci in c:
            p1.add(ci)

        c = curveblank(time, sum(-d_rate, axis = 0), linetype = "dotted")
        c[0].label = "Total"
        curves_d.append(c[0])
        for ci in c:
            p2.add(ci)
    else:
        try:
            time, shell, formation_reac, formation_rate, destruction_reac, \
                destruction_rate = readrout(filename,specie)
        except IOError as e:
            sys.stderr.write("plroute: error: can't open %s. Error : %s\n" % (filename, e) )
            sys.exit(1)
        except ValueError as e:
            sys.stderr.write("plroute: error: can't read %s. Error : %s\n" % (filename, e) )
            sys.exit(1)

        p1.xtitle = p2.xtitle = "Time (yr)"
        p1.xlog = p2.xlog = 1

        # Check that the shell index is valid
        try:
            temp = formation_reac[c, 0, 0]
        except IndexError:
            sys.stderr.write("plroute: error: shell index is out of bounds.\n")
            sys.exit(1)

        # Create arrays containing the destruction/formation routes at
        # each time step and in each shell

        f_reac = unique(formation_reac[c, :, :])
        d_reac = unique(destruction_reac[c, :, :])
        f_reac = f_reac[f_reac.nonzero()]
        d_reac = d_reac[d_reac.nonzero()]
        f_rate = zeros(len(f_reac) * len(time), dtype=float)
        d_rate = zeros(len(d_reac) * len(time), dtype=float)
        f_rate = f_rate.reshape(len(f_reac), len(time))
        d_rate = d_rate.reshape(len(d_reac), len(time))

        for i in range(len(time)):
            for j in range(len(f_reac)):
                index = where(formation_reac[c, i, :] == f_reac[j])[0]
                if len(index) > 0:
                    f_rate[j, i] = formation_rate[c, i, index[0]]
                else:
                    f_rate[j, i] = 0.
            for j in range(len(d_reac)):
                index = where(destruction_reac[c, i, :] == d_reac[j])[0]
                if len(index) > 0:
                    d_rate[j, i] = destruction_rate[c, i, index[0]]
                else:
                    d_rate[j, i] = 0.

        # Find the most important formation/destruction routes. For
        # this we compute the integral of the formation/destruction
        # rates for each formation/destruction over the time interval.

        int_f_rate = zeros(len(f_reac), dtype=float)
        int_d_rate = zeros(len(d_reac), dtype=float)

        dtime = time[1:-1] - time[0:-2]

        for j in range(len(f_reac)):
            if (f_rate[j] == 0).all(): continue
            int_f_rate[j] = sum(f_rate[j, 1:-1] * dtime)
        for j in range(len(d_reac)):
    #        if (d_rate[j] == 0).all(): continue
            int_d_rate[j] = sum(d_rate[j, 1:-1] * dtime)

        if percent:
            int_f_rate_percent = int_f_rate / sum(int_f_rate) * 100.
            int_d_rate_percent = int_d_rate / sum(int_d_rate) * 100.

        index_f = int_f_rate.argsort()[::-1]
        index_d = int_d_rate.argsort()[::-1]
        # FixMe: drop values containing only zeros

        # Find the reaction corresponding to the reaction numbers

        if chmfile:
            try:
                f = open(chmfile)
                net = network_reader.fromfile(f, fileformat = "chm")
                f.close()
            except:
                sys.stderr.write("plroute: error: can't read %s.\n" % chmfile)
                sys.exit(1)
            try:
                f_reaction, d_reaction = [], []
                for r in f_reac:
                    f_reaction.append(net.getreact(r).totex())
                for r in d_reac:
                    d_reaction.append(net.getreact(r).totex())
            except ValueError:
                sys.stderr.write("plroute: error: can't find reaction %i in %s.\n" \
                                     % (r, chmfile))
                sys.exit(1)

        # Plot them, ignoring blanked values

        for j in index_f[0:6]:
            linecolor = linecolor_stack.pop(0)
            linecolor_stack.append(linecolor)

            c = curveblank(time, f_rate[j, :], linecolor = linecolor)
            if chmfile:
                c[0].label = f_reaction[j]
            else:
                c[0].label = "%i" % f_reac[j]
            if percent:
                c[0].label += " (%.0f" % int_f_rate_percent[j] + "%)"
            curves_f.append(c[0])
            for ci in c:
                p1.add(ci)

        for j in index_d[0:6]:
            linecolor = linecolor_stack.pop(0)

            c = curveblank(time, d_rate[j, :], linecolor = linecolor)
            if chmfile:
                c[0].label = d_reaction[j]
            else:
                c[0].label = "%i" % d_reac[j]
            if percent:
                c[0].label += " (%.0f" % int_d_rate_percent[j] + "%)"
            curves_d.append(c[0])
            for ci in c:
                p2.add(ci)

        # Plot the total formation and destruction rates

        c = curveblank(time, sum(f_rate, axis = 0), linetype = "dotted")
        c[0].label = "Total"
        curves_f.append(c[0])
        for ci in c:
            p1.add(ci)

        c = curveblank(time, sum(d_rate, axis = 0), linetype = "dotted")
        c[0].label = "Total"
        curves_d.append(c[0])
        for ci in c:
            p2.add(ci)

    # Draw the plot key
    if chmfile:
        xkey, ykey = .25, .4
    else:
        xkey, ykey = .65, .4
    p1.add(biggles.PlotKey(xkey, ykey, curves_f))
    p2.add(biggles.PlotKey(xkey, ykey, curves_d))

    t[0,0] = p1
    t[0,1] = p2

    if output:
	t.write_eps(output)
    else:
        t.show()

main()
